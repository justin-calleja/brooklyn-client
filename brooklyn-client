#!/usr/bin/env node

var program      = require("commander")
  , bunyan       = require("bunyan")
  , fs           = require("fs")
  , Client       = require("node-rest-client").Client;

process.on("uncaughtException", function (err) {
  console.log(err.message);
});

program
  .version("0.0.1")
  .option("--host [value]", "HTTP host")
  .option("--port [value]", "HTTP port")
  .option("--path [value]", "request URL ['/v1/applications']", "/v1/applications")
  .option("--method [value]", "HTTP method")
  .option("--data [value]", "TODO")
  .option("--log-level [value]", "sets the log level [off]", "off")
  .parse(process.argv);


var log = bunyan.createLogger({
  name: "brooklyn-client",
  level: program.logLevel === "off" ? [] : program.logLevel
});

client = new Client();

var host = program.host || "127.0.0.1";
var port = program.port || "8081";
var path = program.path || "/v1/applications";
var method = program.method || "get";

var requestAbsolutePath = "http://" + host + ":" + port + path;

var methodRegex = new RegExp(method, "i");
if ("get".match(methodRegex)) {
  log.info("get:", requestAbsolutePath);
  client.get(requestAbsolutePath, function(data, response){
    log.info(data);
  });
} else if ("post".match(methodRegex)) {

  fs.readFile(program.data, function(err, data) {
    var args = {
      data: "file=" + data,
      headers:{"Content-Type": "application/yaml"} 
    };
    log.info("post:", requestAbsolutePath);
    client.post(requestAbsolutePath, args, function(responseData, response){
      log.info(responseData);
    });
  });


} else {
  log.warn("Could not handle HTTP method", method);
}

